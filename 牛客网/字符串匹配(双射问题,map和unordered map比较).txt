Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

Examples:
pattern = "abba", str = "dog cat cat dog" should return true.
pattern = "abba", str = "dog cat cat fish" should return false.
pattern = "aaaa", str = "dog cat cat dog" should return false.
pattern = "abba", str = "dog dog dog dog" should return false.
Notes:
You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.

my code:
class Solution {
public:
	bool wordPattern(string pattern, string str) {
		vector<string>word;
		string temp;
		unordered_map<string,char>mp1;
		unordered_map<char, string>mp2;
		istringstream fin(str);
		while (fin>>temp)word.push_back(temp);
		int size =pattern.length();
		if (size != word.size())return false;
		for (int i = 0; i < size; i++){
			mp1.insert(make_pair(word[i],pattern[i]));
			mp2.insert(make_pair(pattern[i], word[i]));
			if (mp1[word[i]] != pattern[i]||mp2[pattern[i]]!=word[i])return false;
		}
		return true;
	}
};

算法说明:
1、要求形成一个双射的形式，则要保证在str中的每一元素只有一个pattern中的元素和其对应，同理在pattern中
的每一个元素要保证只有一个str中的元素和其对应

2、设置两个unordered_map的为了防止如下情况：

pattern str
a   dog
b   cat
b   cat
a   fish

a   dog（以pattern为键值出错）
b   dog
b   dog
a   dog

如果以str为键值，在执行mp1.insert(make_pair(word[i],pattern[i]))的时候<fish,a>键值对会加入到mp1中，则会出现

fish和a以及dog和a对应，不满足满射

如果设置两个unordered_map容器(并且不会覆盖前面的键值),则在满射的情况下两个容器中的键值对才能完全保持一致。






补充：

在map和unordered_map的区别暂且可以理解为

1、map是对键值进行排序，而unordered未对键值进行排序

2、对map进行插入操作时，如果键值存在则插入失败，如果不在则插入成功

3、其赋值同其他类型一样

map.count()返回0或1，代表元素在不在容器中；
map.find()返回迭代器，虽然是迭代器类型，但是可以看成是在数组中元素的下标


4、在输入流对象中：
		istringstream fin(str); 其中str是一个字符串类型，将str中的内容中的空格去掉然后放到fin的缓冲区，然后对单个元素进行
		fin>>word操作进行逐个赋值
		