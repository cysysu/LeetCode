//A、找出数组中只出现一次的元素，其它元素都出现两次
class Solution {
public:
	int singleNumber(vector<int>& nums) {
		int size = nums.size();
		int temp = 0;
		for (int i = 0; i < size; i++){
			temp = temp ^ nums[i];
		}
		return temp;
	}
};
/*算法综述
1.因为其他元素均出现两次所以他们进行异或操作之后全都所有的位都为0，只剩下找的那个数
由0^a=a可以得出最后的数就是要求得数
*/

//B、找出数组中只出现一次的元素，其它元素都出现三次
class Solution {
public:
	int singleNumber(vector<int>& nums) {
		int size = nums.size();
		int count[32] = { 0 };
		int result = 0;
		for (int i = 0; i < 32; i++){
			for (int j = 0; j < size; j++){
				if ((nums[j] >> i) & 1)count[i]++;
			}
			result |= (count[i] % 3) << i;
		}
		return result;
	}
};
/*算法综述
1.由于其他的数都出现三次，假设有一个数n出现3次，如果某一位为1，则三个数异或之后一定为1，如果
是0，则异或之后一定为1，如果result的某一位为1，则用该位1的个数总和%3，如果是1则这个位上的1一定来自target
，如果是0，则说明target的该位为0.
*/

//C、数组中每个元素出现两次，其它两个各出现一次，找出这两个数
class Solution {
public:
	vector<int>singleNumber(vector<int>& nums) {
		int size = nums.size();
		int res[2] = { 0 };
		int result = nums[0];
		vector<int>temp;
		for (int i = 1; i < size; i++){
			result = result^nums[i];
		}
		res[0] = 0;
		res[1] = 0;
		int n = result & (~(result - 1));
		for (int i = 0; i <size; i++){
			if ((n & nums[i]) != 0){
				res[0] = res[0] ^ nums[i];
			}
			else {
				res[1] = res[1] ^ nums[i];
			}
		}
		temp.push_back(res[1]);
		temp.push_back(res[0]);
		return temp;
	}
};
/*算法综述
1.将2n+2变成2n+1
2.假设数组是{1,2,3,4,1,2,3,4,5,6}则可能分成{1,1,3,3,5}和{2,2,4,4,6},数组分开后根据情况A来处理
3.n = result & (~(result - 1))可以求出result上第一个非零位，并将其它位归0；
*/