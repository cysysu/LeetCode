题目描述：

在一个字符串(1<=字符串长度<=10000，全部由字母组成)中找到第一个
只出现一次的字符的位置。若为空串，返回-1。位置索引从0开始

代码：
class Solution {
public:
	int FirstNotRepeatingChar(string str) {
		int len = str.size();
		int flag[52][2],minone=-1;
		memset(flag,0,sizeof(flag));
		if (len==0)return -1;
		for (int i = 0; i < len; i++){
			if (str[i] >= 'A'&&str[i] <= 'Z')
			{
				flag[str[i] - 'A'][0]++;
				flag[str[i] - 'A'][1] = i;
			}
			else {
				flag[str[i] -  'a'+26][0]++;
				flag[str[i] - 'a' + 26][1] = i;
			}
		}
		for (int i = 0; i < 52; i++){
			if (flag[i][0] == 1){
				if (minone<0)
					minone = flag[i][1];
				else if (minone > flag[i][1])
					minone = flag[i][1];
			}
		}
		return minone;
	}
};

分析：
A、当字符串长度不为零时，我们首先默认没有这样的元素即minone=-1；一旦有flag[i][0] == 1
则首先要基准位置，然后再用后续每一个次数为1的字符的位置和它比较。在一般情况下，基准位置
就是数组中的第一个位置。但是这里有一点不同的是我们并不知道基准位置是哪一个，所以通过minone<0
来确定。

B、我们设置一个在基准之外的值minone,如果这个值不在可能的位置域内[0,51]的话，我们就可以用满足条件的第一个
数为基准，