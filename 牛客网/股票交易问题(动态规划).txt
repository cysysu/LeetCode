股票交易问题：


1.只能交易1手：

class Solution {
public:
	int maxProfit(vector<int>& prices) {
		int size = prices.size();
		if (size==0)return 0;
		int min_price =prices[0] , max_profit = 0;
		for (int i = 1; i < size;i++){
			if (prices[i]<min_price){
				min_price = prices[i];
			}
			if (prices[i]-min_price>max_profit){
				max_profit = prices[i] - min_price;
			}
		}
		return max_profit;
	}
};
/*算法综述
1.此题运用动态规划思想.
其基本思想是利用以前保存的已解决子问题的答案，而在需要时再找出已求解子问题的答案，
求最大的股票交易收益，我们设置两个变量min_price和max_profit分别保存在第i天之前的最大利润和股票的最低价格
则在求解在第i天卖出的收益时可以利用一下动态规划方程：
Maxprofit[i]=max{Maxprofit[i-1],prices[i]-min_price},其中prices[i]为股票第i天的价格，min_price为i天内股票的最低
价格。
*/

2.多手交易
class Solution {
public:
	int maxProfit(vector<int>& prices){
		int max_profit = 0;
		int size = prices.size();
		if (size<2)return 0;
		for (int i = 1; i < size;i++){
			max_profit += max(0,prices[i]-prices[i-1]);
		}
		return max_profit;
	}
};
/*算法综述
1.依然可以用到动态规划算法，此时的动态方程是：
Maxprofit[i]=Maxprofit[i-1]+max{0,prices[i]-prices[i-1]};
其中Maxprofit[i]是到第i天为止的最大收益，该算法应用贪心原则
*/

3.两次交易

solution1:
class Solution {
public:
	int submaxProfit(int low,int high,vector<int> &prices){
		if (high - low < 1)return 0;
		int min_price = INT_MAX, max_profit = 0;
		for (int i = low; i <=high; i++){
			if (prices[i]<min_price){
				min_price = prices[i];
			}
			if (prices[i] - min_price>max_profit){
				max_profit = prices[i] - min_price;
			}
		}
		return max_profit;
	}

	int maxProfit(vector<int>& prices) {
		int size = prices.size(),max_profit=0,profit=0;
		if (size<2)return 0;
		for (int i = 1; i < size; i++){
			profit = submaxProfit(0,i-1,prices) + submaxProfit(i,size-1,prices);
			if (profit>max_profit)max_profit = profit;
		}
		return max_profit;
	}
};

算法综述：
利用动态规划算法和分治法
Maxprofit[i]=max{preMaxprofit[i]+postMaxprofit[i]},以第i天为分界线，计算第i天之前进行一次交易的最大收益preProfit[i]，和第i天之后进行一次交易的最大收益postProfit[i]，最后遍历一遍，max{preProfit[i] + postProfit[i]} (0≤i≤n-1)就是最大收益。第i天之前和第i天之后进行一次的最大收益求法同Best Time to Buy and Sell Stock I。

solution 2：

class Solution {
public:
	int maxProfit(vector<int>& prices) {
		int size = prices.size(),min_price,max_profit=0;
		if (size<2)return 0;
		vector<int> premax_profit(prices.size());
		vector<int> postmax_profit(prices.size());
		premax_profit[0] = 0;
		min_price = prices[0];
		for (int i = 1; i < size; i++){
			if (prices[i]<min_price){
				min_price = prices[i];
			}
			if (prices[i] - min_price>max_profit){
				max_profit = prices[i] - min_price;
			}
			if (max_profit>premax_profit[i])premax_profit[i] = max_profit;
			else premax_profit[i] = premax_profit[i - 1];
		}

		postmax_profit[size-1] = 0;
		min_price = prices[size-1];
		max_profit = 0;
		for (int i = size-2; i>=0; i--){
			if (prices[i]>min_price){
				min_price = prices[i];
			}
			if (min_price-prices[i]>max_profit){
				max_profit = min_price - prices[i];
			}
			if (max_profit>postmax_profit[i])postmax_profit[i] = max_profit;
			else postmax_profit[i] = postmax_profit[i + 1];
		}
		max_profit = 0;
		for (int i =0; i<size; i++){
			if (i - 1<0)max_profit = max(max_profit, postmax_profit[i]);
			else max_profit = max(max_profit, premax_profit[i - 1] + postmax_profit[i]);
		}
		return max_profit;
	}
};

算法综述：
利用动态规划法。以第i天为分界线，计算第i天之前进行一次交易的最大收益preProfit[i]，和第i天之后进行一次交易的最大收益postProfit[i]，最后遍历一遍，max{preProfit[i] + postProfit[i]} (0≤i≤n-1)就是最大收益。

其中premax_profit保存的是到第i天为止，进行一手交易的最大获益，postmax_profit表示如果第i天卖进股票，到最后一天为止的获益量，这两个数组的意思是互逆的，但都用到动态规划算法。

  

利用库函数max,min的简化版：
class Solution {
public:
	int maxProfit(vector<int> &prices) {
		if (prices.size() == 0)
			return 0;

		vector<int> f1(prices.size());
		vector<int> f2(prices.size());

		int minV = prices[0];
		f1[0] = 0;
		for (int i = 1; i < prices.size(); i++)
		{
			minV = min(minV, prices[i]);
			f1[i] = max(f1[i - 1], prices[i] - minV);
		}

		int maxV = prices[prices.size() - 1];
		f2[f2.size() - 1] = 0;
		for (int i = prices.size() - 2; i >= 0; i--)
		{
			maxV = max(prices[i], maxV);
			f2[i] = max(f2[i + 1], maxV - prices[i]);
		}

		int sum = 0;
		for (int i = 0; i < prices.size(); i++)
			sum = max(sum, f1[i] + f2[i]);

		return sum;
	}
};