Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 10,1,2,7,6,1,5 and target 8, 
A solution set is: 
[1, 7] 
[1, 2, 5] 
[2, 6] 
[1, 1, 6] 

方法1：
class Solution {
public:
	void dfs(vector<int>& candidates, int start,int target,int &sum){
		int size = candidates.size();
		for (int i = start; i < size;){
			if (sum + candidates[i] <= target){
				temp.push_back(candidates[i]);
				sum += candidates[i];
				if (sum == target){
					result.push_back(temp);
					temp.pop_back();
					sum -= candidates[i];
					return;//剪枝操作
				}
				dfs(candidates, i + 1, target, sum);
				temp.pop_back();
				sum -= candidates[i];
			}
			int j = i + 1;
			while (j < size){
				if (candidates[i] == candidates[j])++j;
				else break;
			}
			i = j;
		}
	}
	vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
		int size = candidates.size();
		if (size == 0)return result;
		int sum = 0;
		sort(candidates.begin(), candidates.end());
		dfs(candidates,0,target,sum);
		return result;
	}
	vector<int>temp;
	vector<vector<int>>result;
};

方法2：
class Solution {
public:
	void dfs(vector<int>& candidates, int start,int target,int &sum){
		int size = candidates.size();
		for (int i = start; i < size;i++){
			if (i!=start&&candidates[i]==candidates[i-1])continue;
			if (sum + candidates[i] <= target){
				temp.push_back(candidates[i]);
				sum += candidates[i];
				if (sum == target){
					result.push_back(temp);
					temp.pop_back();
					sum -= candidates[i];
					return;//剪枝操作
				}
				dfs(candidates, i + 1, target, sum);
				temp.pop_back();
				sum -= candidates[i];
			}
		}
	}
	vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
		int size = candidates.size();
		if (size == 0)return result;
		int sum = 0;
		sort(candidates.begin(), candidates.end());
		dfs(candidates,0,target,sum);
		return result;
	}
	vector<int>temp;
	vector<vector<int>>result;
};



