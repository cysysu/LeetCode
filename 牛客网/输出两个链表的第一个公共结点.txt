题目描述：输入两个链表，找出它们的第一个公共结点。

代码：
class Solution {
public:
	int len(ListNode *head){   //统计链表长度
		int count = 0;
		while (head != 0){
			count++;
			head = head->next;
		}
		return count;
	}

	ListNode* FindFirstCommonNode(ListNode *pHead1, ListNode *pHead2) {
		int count1 = 0, count2 = 0, differ = 0, count = 0;
		ListNode * p1 = pHead1;
		ListNode *p2 = pHead2;
		if (p1 == NULL || p2 == NULL)return NULL;
		count1 = len(p1);
		count2 = len(p2);
		p1 = pHead1;
		p2 = pHead2;
		differ = abs(count1-count2);
		if (count1 > count2){
			while (differ != 0){
				p1 = p1->next;
				differ--;
			}
		}
		else{
			while (differ != 0){
				p2 = p2->next;
				differ--;
			}
		}
		while (p1!= p2){
			p1 = p1->next;
			p2 = p2->next;
		}
		return p1;
	}
};

核心思想：两个链表有公共结点，说明两个链表成“Y”字型，首先统计两个链表的长度，然后求差differ，
将较长的链表表头指针向后挪differ个位置，然后两个链表共同向后移动，逐个比较。对于单链表来说通过
求差的方法来解决一些问题(比如求单链表得倒数)。

问题延伸：
A.将单链表就地逆置
方法：维持三个连续指针，后两个完成指针的逆置，最前面的完成向后移动

B.判断单链表是否有环
方法：利用操场跑步相遇原理：设置两个指针，第一个指针每次向前移动一个位置，第二个指针每次向前
移动两个位置，若有环则两个指针总会相遇。
